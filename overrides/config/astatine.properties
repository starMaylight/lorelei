# Astatine Mod Configure File

# Allows players to eat food anytime, including in Creative mode
# type:boolean
alwaysEatable=false

# Let creative mode players eat food without consuming the item
# type:boolean
creativeEating=true

# Skip rendering for titlentities that out of the distance,-1 to disable
# type:double
maxTileEntityRenderDistance=-1.0

# Skip rendering for entities that out of the distance,-1 to disable
# type:double
maxEntityRenderDistance=-1.0

# Disable stats system,may increase performance.
# type:boolean
disableStats=false

# Enables 32-bit integer storage for item stack sizes in world saves (vanilla: 8-bit byte).
# Affects only storage format, does NOT modify in-game stack limits
# Potential conflicts with other stack-extending mods
# Required for safe handling of stacks >127 when using force-stack-merging
# type:boolean
enableExtendedStackStorage=false

# Allows item entities to merge beyond normal stack limits.
# WARNING: REQUIRES extended-stack-storage-format to prevent data loss on chunk unload(e.g. use enableExtendedStackStorage option)
# type:boolean
forceItemEntityMerge=false

# Delays rendering of projectile entities (snowballs/ender pearls/etc.) to prevent view obstruction,in ticks.
# Backports from new versions.
# type:int
projectileRenderDelay=2

# Controls star twinkling animation parameters
# Mathematical model:
# brightness = (base + sin(time * frequency) * amplitude) * timeFactor
#group: star.twinkling

# type:boolean
star.twinkling.enabled=true

# Oscillation frequency for brightness variation
# Higher values = Faster twinkling
# Unit: radians per tick
# type:float
star.twinkling.frequency=0.2

# Peak brightness variation amplitude
# Actual range: [-amplitude, +amplitude]
# Example: 0.1 -> ~10% brightness variation
# type:float
star.twinkling.amplitude=0.1

# Base brightness level before modulation
# Vanilla default: 0.5
# Range: [0.0, 1.0]
# type:float
star.twinkling.base=0.5

# Time-of-day attenuation coefficient
# 0.0: Have nothing to do with day time
# 1.0: Full day/night cycle effect
# Vanilla behavior: 1.0
# type:float
star.twinkling.timeAttenuation=1.0

# --------------------

#group: star.gen

# type:boolean
star.gen.enabled=false

# Controls number of visible stars in night sky
# 0: Disable stars | >0: Custom count | Default: 1500
# type:int
star.gen.count=3000

# Base size multiplier for generated stars (Vanilla: 0.15)
# type:double
star.gen.baseSize=0.09

# Controls the random fluctuation amplitude for star sizes
# - Actual size = baseSize +- (random * amplitude)
# - Vanilla default: 0.1
# Example:
# 0.3 -> Stars vary between ~30% of base size
# 0.0 -> All stars have identical size
# type:double
star.gen.sizeFluctuation=0.3

# Controls what method should be used while generating star sizes.
# Given f as the star size,b as baseSize.
# s for sizeFluctuation value,rand() for a random function that return a [0,1) value,randI()=rand()*2-1
# Allowed methods:
# 0 -- liner-offset: f=b+randI()*s
# 1 -- exponential: f=1-(ln(1-randI()))*s
# 2 -- log-normal: f=e^([nextGaussian]()*s)
# type:int
star.gen.sizeGenerateMethod=2

# Seed value for star pattern generation
# 0: Random seed each session | Requires star generation mixins
# type:long
star.gen.seed=23333

# --------------------

# [Experimental]
#group: random

# Replaces Vanilla's java.util.Random with ThreadLocalRandom in specific classes for better thread performance.
# Behaves strangely most of the time.
# type:boolean
random.fastRandom=false

# --------------------

#group: world.time

# Controls world time advancement granularity:
# - Value N: World time increments by 1 tick every N real-time ticks
# - Vanilla equivalent: 1 (Time progresses 1:1 with real ticks)
# - Higher values = Slower world time progression
# Example:
# 3 -> World time advances 1 tick every 3 server ticks
# type:int
world.time.worldTimeAdvancementInterval=1

# Displays in-game time in HUD overlay
# type:boolean
world.time.showGameTime=false

# X-axis offset for time display overlay
# type:int
world.time.timeDisplayXOffset=2

# Y-axis offset for time display overlay
# type:int
world.time.timeDisplayYOffset=4

# --------------------

# [Experimental]
# Cache loaded chunks.
# WARNING: Directly storing Chunk objects might cause compatibility issues with some mods.
#group: chunkcache

# type:boolean
chunkcache.enabled=false

# Maximum number of chunks allowed in the cache.
# Higher values may improve chunk loading performance but increase memory usage.
# Minimum value: 16
# type:int
chunkcache.maxCacheSize=16384

# Minimum number of chunks guaranteed to be retained in cache,
# This helps reduce reloading overhead for core areas (e.g. player bases).
# type:int
chunkcache.minReservedChunks=127

# Interval in game ticks between automatic cache cleanup checks.
# 1 second = 20 ticks (at 20 TPS).
# Default: 3200 ticks (2.5 minutes)
# type:int
chunkcache.cleanupInterval=3200

# Minimum priority score required to retain chunks during cleanup.
# Chunks with scores below this threshold will be removed first.
# Set higher to keep fewer chunks; lower to preserve more.
# type:int
chunkcache.minLoadedTimeToRetain=250

# Maximum idle time (in ticks) a cached chunk can remain unaccessed
# before becoming eligible for cleanup. Higher values keep chunks cached longer
# but may increase memory usage. Combines with access frequency for cleanup decisions
# type:int
chunkcache.maxIdleTimeToPurge=0

# Print debug info in console
# type:boolean
chunkcache.debug=false

# --------------------

#group: lang

# Forces ASCII font rendering for all text elements, fixing incorrect Unicode font rendering when non-ASCII characters are present
# type:boolean
lang.forceAsciiFont=true

# Optimizes language file loading by:
# - Skipping redundant resource reloads when switching languages
# - Replacing regex-based .lang file parsing with a manual parser
# type:boolean
lang.fastLang=true

# Disables Forge's extended .lang file processing
# Recommended for better performance when using optimizeLanguageLoading
# Disable if experiencing missing translation keys
# type:boolean
lang.disableForgeLangExtensions=false

# [Experimental]
# Enables enhanced language selection interface with drag-and-drop prioritization
# - Pack-style language stacking (similar to resource packs)
# - Visual language preview support
# - Multiple language layer blending
# type:boolean
lang.languageSelector=false

# --------------------

